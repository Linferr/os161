Step 4:
-------------------------sys161 output------------
sys161: System/161 release 2.0.3, compiled Aug 10 2015 13:31:07

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #1)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]:

---------------git log output-----------------------
commit 5c8d1ec0b2cc25e0b9e520e861e61402fea63d26 (HEAD -> master, tag: asst1-start, origin/master)
Author: Linfeng Gao <gao0723@ssh-linux3.ece.ubc.ca>
Date:   Mon Sep 12 23:57:23 2022 -0700

    Initial commit of os161 for CPEN331

---------------git tag output------------------
asst1-start

-----------------------------------------------------------------
Step5. Complete the code reading exercise

Question 1: In the book chapters and in class you were introduced to the mechanisms used to 
transfer control between user processes and the operating system. Tell us where we can find 
the first line of OS/161 code that is executed when a trap occurs. Then tell us where control
gets transferred to from that point. What about an interrupt? How does that differ?

A trap is a software-produced interrupt, which I think the first should be handled by 
either mips_utlb_handler or mips_general_handler. 
Both of them are in the: os161/src/kern/arch/mips/locore/exception-mips1.S.
line 69: mips_utlb_handler
line 87: mips_general_handler

Both of them jump to common_exception (line 104/105), 
set up the trap_frame, and than call mips_trap.
mips_trap() is in os161/src/kern/arch/mips/locore/trap.c, line 125.
It is a general trap(exception) handling function for mips, which means different type would go to different handler.
For example: 
    Syscall? Call the syscall handler and return.
    in kern/arch/mips/syscall/syscall.c., which is a System call dispatcher.

The trap is a special kind of interrupt, which is commonly referred to software intrupt.
In this case, the first part of trap and interrupt are the same, until get in the mips_trap(), which may .
The interupt would than go to (line188) mainbus_interrupt() to be handled.

Also, the processor turned interrupts off when it took the trap.




Question 2: Making a system call, such as write, ultimately leads to a trap. Find the code 
in OS/161 that invokes system calls from user programs and causes traps. In which file and on 
which lines did you find this code?

os161/src/userland/lib/libc/arch/mips/syscalls-mips.S, line 84
The comment said that all we do is load the syscall number into v0, 
and kernel would find it and jump to the shared syscall code.

line 49: #define SYSCALL(sym, num), the high level define.
line 55: jump to __syscall, here jump to the real function.
line 84: __syscall function, this is the real function invokes system calls from userland.





Question 3: Why do you suppose there are libc functions in the "common" part of the source
tree (common/libc) as well as in userland/lib/libc?

common/libc is something shared by both kernel and userï¼Œand mostly standard C library functions;
while userland/lib/libc is only for users.
This would also protect the kernel libc away form the possible changes of users when they would like to do some 
changes to their userland libc.




Question 4: Name two things that configure configures. What might invalidate that configuration and 
make you need/want to rerun it?

configure configures:
Target hardware platform and machine type.
Default optimize/debug flag.
Default location of the root of the installed system.

We need/want to rerun it when we change the hardware platform, or change the location 
of the root of installed system. For example, when we use a different computer with a different OS.




Question 5: What are some of the details which would make a function "machine dependent"? Why might it be 
important to maintain this separation, instead of just putting all of the code in one function?

Machine-dependent means the function is based on hardware.
Function written in assembly is machine-dependment as different machine would have different register,
which means some of the code would meed some specific registers or hardware functionality. These stuff only 
relate to the hardware/machine. For example, 32-bit MIPS processors is different from x86-64.

Maintaining this separation would be helpful in below lists:
First, it would be helpful to organize our different file or code on the same machine. Most of the time we don't need to change
those machine-dependent code as they are almost the same.
Also, when we want ot change to another computer/machine, it is easy for us to traget the code to change(machine-dependent) and 
optimize them to our new machine. 



Question 6: How large is a trapframe? Why?

os161/src/kern/arch/mips/include/trapframe.h
In the struct trapfame, there are (77-41+1=37) registers.
Each register is under type of uint32_t, which is 32 bits, 4 byte each.
In this case, 37*4 = 148 bytes.

It is defined to be 37 registers.
Structure describing what is saved on the stack during entry to the exception handler.
Each register would save different information, e.g. vaddr, status. vause, etc.





Question 7: Under what circumstances should you re-run the kern/conf/config script?

If we change the source file, or change the kernel config, or enable/disable an option,
or enable/disable a device, or get additional directives from another file.




Question 8: Under what circumstances should you run bmake depend in kern/compile/DUMBVM?

If you change #include directives or header to change the dependence.
Or you just finished the congiguration of DUMBVM.

"bmake depend" scans all of the source files that you have configured to 
be part of your kernel and ensures that all their header files are also included.




Question 9: Under what circumstances should you run bmake or bmake install in kern/compile/DUMBVM?

If you change the kernel code or change the dependence, 
after you run the "bmake depend" to build the dependance,
and than you should run "bmake" to to compile or recompile the kernel in its source directory. 
This generates your kernel binary.
And than use "bmake install" to install your kernel into the root directory that you configured above.




Question 10: When you booted your kernel, you found that there were several commands that you could issue 
to experiment with it. Explain exactly where and what you would have to do to add a command that printed 
out, "Hello world!"

At line 406, add function like this:
static
int
cmd_hello(int nargs, char **args)
{   (void)nargs;
	(void)args;
	kprintf("Hello world!\n");
	return 0;
}

At line 457, under *opsmenu[], add:
 "[hello]   Print 'Hello world!'      ",

At line 565, under cmd_opsmenu, add:
 {"hello", cmd_hello };

Then remember to goi back to os161/src/kern/compile/DUMBVM, and "bmake" to compile, and "bmake install".
After all these, we can boot the kernel and go to "menu", "operations menu" and type "hello", it would print "Hello world!".








Question 11: Why do we need to include these in your OS/161 distribution? Why can't you just use the 
standard utilities that are present on the machine on which you're working?

There are so many machine-dependent functions which cannot work well on our machine.
That is to say, the standard utilities work well on OS/161 or 32 bits-MIPS, may not work on our x86-64.





Question 12: When a user program exits, what is done with the program's return value?

os161/src/userland/lib/crt0/mips/crt0.S
In this file, the comment said that, all we really do is save copies of argv and environ 
for use by libc funcions (e.g. err* and warn*), and call exit when main returns

The code said that, return value of main would be in v0 register, 
and than be moved to s0(which is callee-save) so we still have it in case exit() returns.
Also move it to a0 register a sthe argument of exit().




Question 13: Imagine that you wanted to add a new system call. List all the places that you would 
need to modify/add code. Then review your answers to questions 7-9 and note which of those actions 
you need to take in order to test the new system call.

In kern/arch/mips/syscall/syscall.c:syscall(), create a new case under line 112 which is used for exception.
In kern/include/syscall.h, create a new prototype under line 61.
In kern/include/kern/syscall.h, define a new syscall number.

Then we need to rerun kern/conf/config, in kern/compile/DUMBVM:
Type "bmake depend" to build dependence,
Type "bmake" to compile,
Type "bmake install" to install your kernel into the root directory that you configured above.



-----------------------------------Step 7---------------------------------

Question 14: What is the name of the very first function that executes when OS161 starts up? 

    The very first function is "__start" in os161/src/kern/arch/sys161/main/start.S.



Question 15: What is the very first assembly instruction that executes? 

    line 54 in os161/src/kern/arch/sys161/main/start.S
    "addiu sp, sp, -24"



Question 16: Set the breakpoints in the kernel function that shows the menu and in the kernel main function. 
Now tell GDB to display all the breakpoints that were set and copy the output to your submit file. 

    Num     Type           Disp Enb Address    What
    1       breakpoint     keep y   0x80014a50 in menu at ../../main/menu.c:711
    2       breakpoint     keep y   0x800139e4 in kmain at ../../main/main.c:211



Question 17: Briefly describe what happens between the beginning of the 
execution and the invocation of the kernel main function. 

    First, the kernel is stopped in start.S, __start() function. 
    It set up the stact frame, memory map, flush the instruction cache, initialize the TLB, set up registers etc.
    Then it go to the kernel main function "kmain".
     



Question 18: What is the assembly language instruction that calls the kernel main function? 

    In /os161/src/kern/arch/sys161/main/start.S,
    line 215: jal kmain



Question 19: Step through the boot() code to find out what functions are called during early initialization. 
Paste the gdb output that shows you what these functions are.

Breakpoint 7, boot () at ../../main/main.c:99
99              kprintf("\n");
(gdb) s
kprintf (fmt=0x8002fb4c "\n") at ../../lib/kprintf.c:101
101             dolock = kprintf_lock != NULL
(gdb) n
104                     && curcpu->c_spinlocks == 0;
(gdb) n
101             dolock = kprintf_lock != NULL
(gdb) n
106             if (dolock) {
(gdb) n
110                     spinlock_acquire(&kprintf_spinlock);
(gdb) n
113             va_start(ap, fmt);
(gdb) n
114             chars = __vprintf(console_send, NULL, fmt, ap);
(gdb) n
117             if (dolock) {
(gdb) n
121                     spinlock_release(&kprintf_spinlock);
(gdb) n
124             return chars;
(gdb) n
125     }





Question 20: Set a breakpoint in thread_bootstrap(). 
Once you hit that breakpoint, at the very first line of that function, 
attempt to print the contents of the *bootcpu variable. 
Copy the output into the submit file. 

Breakpoint 1, thread_bootstrap () at ../../thread/thread.c:357
357             cpuarray_init(&allcpus);
(gdb) p *bootcpu
Cannot access memory at address 0x80000





Question 21: Now, step through that function until after the line that says 'bootcpu = cpu_create(0)'. 
Now print the content of *bootcpu and paste the output. 

(gdb) s
cpuarray_init (a=0x800358f0 <allcpus>) at ../../thread/thread.c:67
67      DEFARRAY(cpu, static __UNUSED inline);
(gdb) n
thread_bootstrap () at ../../thread/thread.c:367
367             bootcpu = cpu_create(0);
(gdb) p *bootcpu
Cannot access memory at address 0x80000

(gdb) n
368             bootthread = bootcpu->c_curthread;
(gdb) p *bootcpu
$1 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af10, tln_next = 0x0, 
      tln_self = 0x0}, tl_count = 0}, c_hardclocks = 0, c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, 
      tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0}, c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {
    splk_lock = 0, splk_holder = 0x0}}







Question 22: Print the allcpus array before the boot() function is executed. Paste the output. 

(gdb) cpuarray allcpus
0 cpus



Question 23: Print again the same array after the boot() function is executed. Paste the output.  

1 cpus
cpu 0:
$2 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {
      tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks = 0, c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, 
      tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0}, c_ipi_pending = 0, c_shootdown = {{
      ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {splk_lock = 0, splk_holder = 0x0}}






